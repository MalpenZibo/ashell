//! # D-Bus interface proxy for: `net.connman.iwd.AccessPoint`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "net.connman.iwd.AccessPoint", assume_defaults = true)]
pub trait AccessPoint {
    /// GetOrderedNetworks method
    fn get_ordered_networks(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Scan method
    fn scan(&self) -> zbus::Result<()>;

    /// Start method
    fn start(&self, ssid: &str, psk: &str) -> zbus::Result<()>;

    /// StartProfile method
    fn start_profile(&self, ssid: &str) -> zbus::Result<()>;

    /// Stop method
    fn stop(&self) -> zbus::Result<()>;

    /// Frequency property
    #[zbus(property)]
    fn frequency(&self) -> zbus::Result<u32>;

    /// GroupCipher property
    #[zbus(property)]
    fn group_cipher(&self) -> zbus::Result<String>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// PairwiseCiphers property
    #[zbus(property)]
    fn pairwise_ciphers(&self) -> zbus::Result<Vec<String>>;

    /// Scanning property
    #[zbus(property)]
    fn scanning(&self) -> zbus::Result<bool>;

    /// Started property
    #[zbus(property)]
    fn started(&self) -> zbus::Result<bool>;
}
