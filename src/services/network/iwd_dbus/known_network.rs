//! # D-Bus interface proxy for: `net.connman.iwd.KnownNetwork`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "net.connman.iwd.KnownNetwork", assume_defaults = true)]
pub trait KnownNetwork {
    /// Forget method
    fn forget(&self) -> zbus::Result<()>;

    /// AutoConnect property
    #[zbus(property)]
    fn auto_connect(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_auto_connect(&self, value: bool) -> zbus::Result<()>;

    /// Hidden property
    #[zbus(property)]
    fn hidden(&self) -> zbus::Result<bool>;

    /// LastConnectedTime property
    #[zbus(property)]
    fn last_connected_time(&self) -> zbus::Result<String>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// Type property
    #[zbus(property)]
    fn type_(&self) -> zbus::Result<String>;
}
